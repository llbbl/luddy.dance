name: Lighthouse CI Performance Testing

on:
  # Run on pull requests to main
  pull_request:
    branches: [main]
  # Run on pushes to main
  push:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better performance analysis
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run Lighthouse CI
        run: |
          # Install Lighthouse CI globally
          npm install -g @lhci/cli@0.15.1

          # Run Lighthouse CI
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read Lighthouse results
            const reportsDir = './lighthouse-reports';
            if (fs.existsSync(reportsDir)) {
              const files = fs.readdirSync(reportsDir);
              const manifestFile = files.find(f => f.includes('manifest.json'));

              if (manifestFile) {
                const manifest = JSON.parse(fs.readFileSync(path.join(reportsDir, manifestFile), 'utf8'));

                let comment = '## üöÄ Lighthouse CI Results\\n\\n';

                manifest.forEach(result => {
                  const scores = result.summary;
                  comment += `### ${result.url}\\n\\n`;
                  comment += `| Category | Score |\\n`;
                  comment += `|----------|-------|\\n`;
                  comment += `| Performance | ${Math.round(scores.performance * 100)} |\\n`;
                  comment += `| Accessibility | ${Math.round(scores.accessibility * 100)} |\\n`;
                  comment += `| Best Practices | ${Math.round(scores['best-practices'] * 100)} |\\n`;
                  comment += `| SEO | ${Math.round(scores.seo * 100)} |\\n\\n`;
                });

                comment += 'üìä Full reports are available in the workflow artifacts.';

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

  # Performance regression detection
  performance-budget:
    runs-on: ubuntu-latest
    needs: lighthouse
    if: github.event_name == 'pull_request'

    steps:
      - name: Download lighthouse reports
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-reports
          path: lighthouse-reports/

      - name: Check performance budget
        run: |
          echo "üéØ Checking performance budgets..."

          # Basic performance budget checking
          # (In a real setup, you'd parse the JSON and check thresholds)
          if [ -d "lighthouse-reports" ]; then
            echo "‚úÖ Lighthouse reports generated successfully"
            ls -la lighthouse-reports/
          else
            echo "‚ùå No Lighthouse reports found"
            exit 1
          fi

  # Send performance metrics to monitoring (placeholder)
  send-metrics:
    runs-on: ubuntu-latest
    needs: lighthouse
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download lighthouse reports
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-reports
          path: lighthouse-reports/

      - name: Send metrics to monitoring
        run: |
          echo "üìä Sending performance metrics to monitoring system..."
          # Placeholder for sending metrics to your monitoring system
          # Examples:
          # - DataDog
          # - New Relic
          # - Custom analytics endpoint
          # - Time series database

          echo "‚úÖ Metrics sent successfully (placeholder)"